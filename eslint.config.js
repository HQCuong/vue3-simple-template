import eslint from '@eslint/js';
import eslintPluginVue from 'eslint-plugin-vue';
import globals from 'globals';
import typescriptEslint from 'typescript-eslint';
import stylisticJs from '@stylistic/eslint-plugin-js';

export default typescriptEslint.config(
  { ignores: ['*.d.ts', '**/dist'] },
  {
    extends: [
      eslint.configs.recommended,
      ...typescriptEslint.configs.recommended,
      ...eslintPluginVue.configs['flat/recommended'],
    ],
    plugins: {
      '@stylistic/js': stylisticJs,
    },
    files: ['**/*.{ts,vue}'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: globals.browser,
      parserOptions: {
        parser: typescriptEslint.parser,
      },
    },
    rules: {
      // Common rules
      // https://eslint.org/docs/latest/rules/
      'no-duplicate-imports': 'error',
      'no-self-compare': 'error',
      'no-unassigned-vars': 'error',
      'no-useless-backreference': 'error',

      'arrow-body-style': ['error', 'as-needed'],
      'capitalized-comments': 'error',
      'consistent-return': 'error',
      'curly': 'error',
      'default-case': 'error',
      'default-case-last': 'error',
      'dot-notation': 'error',
      'eqeqeq': 'error',
      'init-declarations': 'error',
      'max-depth': ['error', 3],
      'max-lines': ['error', 300],
      'max-lines-per-function': ['error', 50],
      'max-nested-callbacks': ['error', 3],
      'max-params': ['error', 4],
      'no-else-return': 'error',
      'no-empty-function': 'error',
      'no-eq-null': 'error',
      'no-implicit-coercion': 'error',
      'no-inline-comments': 'error',
      'no-lone-blocks': 'error',
      'no-lonely-if': 'error',
      'no-magic-numbers': 'error',
      'no-multi-assign': 'error',
      'no-param-reassign': 'error',
      'no-plusplus': 'error',
      'no-return-assign': 'error',
      'no-shadow': 'error',
      'no-unneeded-ternary': 'error',
      'no-useless-return': 'error',
      'no-var': 'error',
      'prefer-arrow-callback': 'error',
      'prefer-const': 'error',

      // Vue rules
      // https://eslint.vuejs.org/rules/
      'vue/block-lang': ['error', { script: { lang: 'ts' } }],
      'vue/block-tag-newline': 'error',
      'vue/component-api-style': ['error', ['script-setup', 'composition']],
      'vue/component-name-in-template-casing': ['error', 'PascalCase', { registeredComponentsOnly: false }],
      'vue/custom-event-name-casing': ['error', 'camelCase'],
      'vue/define-emits-declaration': ['error', 'type-based'],
      'vue/define-macros-order': ['error', {
        'order': ['defineProps', 'defineEmits', 'defineSlots', 'defineModel'],
        'defineExposeLast': true,
      }],
      'vue/no-import-compiler-macros': 'error',
      'vue/no-multiple-objects-in-class': 'error',
      'vue/no-ref-object-reactivity-loss': 'error',
      'vue/no-root-v-if': 'error',
      'vue/no-static-inline-styles': 'error',
      'vue/no-undef-components': ['error', { ignorePatterns: ['^RouterLink$', '^RouterView$'] }],
      'vue/no-undef-properties': 'error',
      'vue/no-unused-emit-declarations': 'error',
      'vue/no-unused-refs': 'error',
      'vue/no-use-v-else-with-v-for': 'error',
      'vue/no-useless-mustaches': 'error',
      'vue/no-useless-v-bind': 'error',
      'vue/padding-line-between-blocks': 'error',
      'vue/prefer-true-attribute-shorthand': 'error',
      'vue/prefer-use-template-ref': 'error',
      'vue/require-prop-comment': ['error', { type: 'line' }],
      'vue/require-typed-ref': 'error',
      'vue/slot-name-casing': ['error', 'camelCase'],

      // Stylistic rules
      '@stylistic/js/array-bracket-newline': ['error', 'consistent'],
      '@stylistic/js/array-element-newline': ['error', 'consistent'],
      '@stylistic/js/arrow-parens': ['error', 'as-needed'],
      '@stylistic/js/comma-dangle': ['error', 'always-multiline'],
      '@stylistic/js/dot-location': ['error', 'property'],
      '@stylistic/js/function-call-argument-newline': ['error', 'consistent'],
      '@stylistic/js/implicit-arrow-linebreak': ['error', 'beside'],
      '@stylistic/js/indent': ['error', 2, { ignoreComments: true, SwitchCase: 1 }],
      '@stylistic/js/max-len': ['error', { code: 150 }],
      '@stylistic/js/newline-per-chained-call': ['error'],
      '@stylistic/js/no-extra-semi': ['error'],
      '@stylistic/js/nonblock-statement-body-position': ['error'],
      '@stylistic/js/no-multiple-empty-lines': ['error', { max: 1 }],
      '@stylistic/js/object-curly-newline': ['error', { multiline: true }],
      '@stylistic/js/object-curly-spacing': ['error', 'always'],
      '@stylistic/js/object-property-newline': ['error'],
      '@stylistic/js/operator-linebreak': ['error', 'before'],
      '@stylistic/js/padding-line-between-statements': [
        'error',
        { blankLine: 'always', prev: ['const', 'let'], next: '*' },
        { blankLine: 'any', prev: ['const', 'let'], next: ['const', 'let'] },
        { blankLine: 'always', prev: '*', next: ['if', 'switch', 'function'] },
        { blankLine: 'always', prev: ['if', 'switch', 'function'], next: '*' },
        { blankLine: 'always', prev: '*', next: 'return' },
        { blankLine: 'always', prev: 'import', next: '*' },
        { blankLine: 'any', prev: 'import', next: 'import' },
      ],
      '@stylistic/js/quotes': ['error', 'single'],
      '@stylistic/js/semi': ['error', 'always'],
      '@stylistic/js/semi-style': ['error'],
    },
  },
);
